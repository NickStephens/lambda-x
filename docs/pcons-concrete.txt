CONCRETE SYNTAX FOR PCONS

Script -> (Def | Exp)+

Def -> LETF | LETREC

LETF   ->  Name {Arg} '=' Exp 
LETREC -> 'Letrec' Name {Arg} '=' Exp

-------- Purity --------

Exp -> App | Lam | Var | Let | Case | Name | (Exp) | BinSugar | List | Value | Oper

App -> Exp Exp

Lam -> 'L' Var '.' Exp

Var -> Name

Let -> 'Let' Binding 'in' Exp

Case -> 'Case' Exp 'of' {Exp '->' Exp}

======== Sugar ========

BinSugar -> Exp (Name | Lam | Oper) Exp 

======== Constants (Impure) =========

Value -> Int | Char | Bool

List -> [{Value ','} Value] | [] 


Num -> Digit+ ['.' Digit+] | '.' Digit+

Char -> ( 'a' | 'b' .. | 'Y' | 'Z' )

Bool -> True | False

Oper -> '+' | '-' | '*' | '/' |
		'>' | '<' | '==' | '<=' | '>='
			'CAR' | 'CDR' | 'CONS'

======== Bits =======

Digit -> { '1' | '2' ... | '9' | '0' }

Name -> Char+
