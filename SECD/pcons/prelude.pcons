Letrec map f as = case (as) of
	[] -> ([])
	(x:xs) -> ((f x:(map f xs)));
Letrec filter p xs = case (xs) of
	[] -> ([])
	(x:xs) -> (if (p x) then (x:(filter p xs)) else (filter p xs));
Letrec foldl f v as = case (as) of
	[] -> (v)
	(x:xs) -> (foldl f (f v x) xs);
Letrec foldr f b as = case (as) of
	[] -> (b)
	(x:xs) -> (f x (foldr f b xs));

Letrec foldr1 f (x:xs) = case (xs) of
			[] -> (x) 
			ys -> (f x (foldr1 f xs));

rev = foldl (\xs.\x.x:xs) [];
Letrec length xs = case (xs) of
	[] -> (0)
	(x:xs) -> (1+(length xs));
Letrec zip xss yss = case (xss) of
	[] -> ([])
	(x:xs) -> (case (yss) of
		[] -> ([])
		(y:ys) -> ((x<>y):(zip xs ys)));
Letrec append xs ys = case (xs) of
	[] -> (ys)
	(x:xs) -> (x:append xs ys);
concat = foldr append [];
snd (a,b) = b;
fst (a,b) = a;
m = (\pr.fst pr+snd pr) (2,3);





Letrec fib n = case (n) of
	0 -> (1)
	1 -> (1)
	x -> (fib (n-1)+fib (n-2));
Letrec fbs n = case (n) of
	0 -> ([1])
	x -> ((\fb.fb x:(fbs (x-1))) fib);
m = fbs 8;



head (x:xs) = x;
Letrec append xs ys = case (xs) of
	[] -> (ys)
	(x:xs) -> (x:append xs ys);
Letrec delete n (x:xs) = if (n==x) then (xs) else (x:delete n xs);
del s d = (head..delete s..delete d) [1,2,3];
Letrec mvs n (s,d) = case (n) of
	0 -> ([])
	x -> (append (mvs (n-1) (s<>del s d)) (append ((s<>d):[]) (mvs (n-1) (del s d<>d))));
twr n = mvs n (1,3);
m = twr 3;




rev = foldl (\xs.\x.x:xs) [];
mod a b = let x = a/b; in a-b*x;
Letrec gen n l = case (n) of
	0 -> (l)
	x -> (gen (n-1) (n:l));
Letrec filter p xs = case (xs) of
	[] -> ([])
	(x:xs) -> (if (p x) then (x:(filter p xs)) else (filter p xs));
Letrec sieve fs ps = case (fs) of
	[] -> (ps)
	(x:xs) -> (let filt = filter (\n.mod n x!=0) xs; in sieve (filt) (x:ps));
m = let lst = gen 100 []; in (rev..sieve (~lst)) [];

